---
# tasks file for ansible-role-clamav/

- name: "Include OS-specific variables"
  ansible.builtin.include_vars:
    file: "{{ ansible_os_family }}.yaml"

- name: "Gather the package facts"
  ansible.builtin.package_facts:
    manager: auto
  when: ansible_facts.packages is not defined

- name: "Check for EPEL repository (RedHat)"
  ansible.builtin.shell: sudo yum repolist epel* | grep -i "repolist" | awk '{ print $2 }'
  register: repo_count
  when: ansible_facts['os_family'] == 'RedHat'

- name: "Set facts for install status (RedHat)"
  ansible.builtin.set_fact:
    clamav_install: true
  when: repo_count.stdout != "0" or ansible_facts['os_family'] == 'Debian'

- name: "Enable Antivirus File Scan SELinux Boolean"
  ansible.posix.seboolean:
    name: antivirus_can_scan_system
    state: yes
    persistent: yes
  when: ansible_selinux.status == 'enabled'

- name: "Install ClamAV packages"
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  with_items: "{{ clamav_packages }}"
  when:
    - item|string not in ansible_facts.packages
    - clamav_install

- name: "Configure FreshClam service configuration file"
  ansible.builtin.lineinfile:
    dest: "{{ freshclam_config }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
    backup: yes
  with_items:
    - regexp: "^#UpdateLogFile"
      line: "UpdateLogFile {{ freshclam_log }}"
    - regexp: "^#LogFileMaxSize"
      line: "LogFileMaxSize {{ freshclam_logmaxsize }}"
    - regexp: "^#LogTime"
      line: "LogTime {{ freshclam_logtime }}"
    - regexp: "^#LogSyslog"
      line: "LogSyslog {{ freshclam_syslog }}"
    - regexp: "^#LogFacility"
      line: "LogFacility {{ freshclam_logfacility }}"
    - regexp: "^#LogRotate"
      line: "LogRotate {{ freshclam_logrotate }}"
    - regexp: "^#Checks"
      line: "Checks {{ freshclam_checks }}"
  when: clamav_install

- name: "Update ClamAV Database"
  block:
    - name: "Stop FreshClam Service"
      ansible.builtin.service:
        name: "{{ freshclam_service }}"
        state: stopped
    - name: "Update ClamAV Database"
      ansible.builtin.shell: freshclam --quiet
    - name: "Start FreshClam Service"
      ansible.builtin.service:
        name: "{{ freshclam_service }}"
        enabled: yes
        state: started
  when: clamav_install

- name: "Configure ClamAV daemon service configuration file"
  block:
    - name: "Configure ClamAV daemon service configuration file"
      ansible.builtin.lineinfile:
        dest: "{{ clamd_config }}"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
        backup: yes
        with_items:
          - regexp: "^#LogFile"
            line: "LogFile {{ clamd_logfile }}"
          - regexp: "^#LogFileMaxSize"
            line: "LogFileMaxSize {{ clamd_logmaxsize }}"
          - regexp: "^#LogTime"
            line: "LogTime {{ clamd_logtime }}"
          - regexp: "^#LogSyslog"
            line: "LogSyslog {{ clamd_syslog }}"
          - regexp: "^#LogFacility"
            line: "LogFacility {{ clamd_logfacility }}"
          - regexp: "^#LogRotate"
            line: "LogRotate {{ clamd_logrotate }}"
          - regexp: "^#LocalSocket"
            line: "LocalSocket {{ clamd_localsocket }}"
    - name: "Add exclusings to ClamAV daemon service configuration file"
      ansible.builtin.lineinfile:
        dest: "{{ clamd_config }}"
        insertafter: EOF
        line: "{{ item }}"
        state: present
        with_items:
          - "ExcludePath ^/proc/"
          - "ExcludePath ^/sys/"
          - "ExcludePath ^/dev/"
          - "ExcludePath ^/run/"
          - "ExcludePath ^/var/log/lastlog"
          - "ExcludePath ^/remotehome/"
  when: clamav_install

- name: "Enable & Start ClamAV daemon service"
  ansible.builtin.service:
    name: "{{ clamd_service }}"
    enabled: yes
    state: started
  when: ansible_facts['os_family'] == 'Debian'

- name: "Configure ClamAV scaning script"
  block:
    - name: "Configure ClamAV scaning script(s)"
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - src: clam_daily.sh.j2
          dest: /usr/local/bin/clam_daily.sh
        - src: clam_monthly.sh.j2
          dest: /usr/local/bin/clam_monthly.sh
    - name: "Configure Cronjob's for scaning script(s)"
      ansible.builtin.cron:
        name: "{{ item.name }}"
        special_time: "{{ item.time }}"
        job: "{{ item.dest }}"
      with_items:
        - name: "ClamAV Daily Scan"
          time: daily
          dest: /usr/local/bin/clam_daily.sh
        - name: "ClamAV Monthly Scan"
          time: monthly
          dest: /usr/local/bin/clam_monthly.sh
  when: clamav_install